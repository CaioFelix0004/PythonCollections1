# -*- coding: utf-8 -*-
"""PythonCollections1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y2O8oIgB06mj_0_RtFGemVUzzrKdFR0C
"""

idade1 = 39
idade2 = 30
idade3 = 20
idade4 = 15

print(idade1)
print(idade2)
print(idade3)
print(idade4)

idades = [30, 39, 20, 15]
print(idades)

class ContaCorrente:
    def __init__(self, agencia):
        self.agencia = agencia
        self.valor = 0

    def deposita(self, valor):
      self.valor += valor

conta_do_gui = ContaCorrente(313)
conta_do_gui.deposita(300)
conta_do_gui.valor



"""## HeranÃ§a e Polimorfismo"""

from abc import ABCMeta, abstractmethod


class Conta(metaclass = ABCMeta):
  def __init__(self, codigo):
    self._codigo = codigo
    self._saldo = 0

  def deposita(self, valor):
    self._saldo += valor

  @abstractmethod
  def passa_o_mes(self):
    pass

  def __str__(self):
    return f'>> Codigo {self._codigo} Saldo {self._saldo} <<'

class ContaCorrente(Conta):
  def passa_o_mes(self):
    self._saldo -= 2

class ContaPoupanca(Conta):
  def passa_o_mes(self):
    self._saldo *= 1.01
    self._saldo -= 3

class ContaInvestimento(Conta):
  pass

ContaInvestimento(11)

conta16 = ContaCorrente(16)
conta16.deposita(1000)
conta16.passa_o_mes()
print(conta16)

conta17 = ContaPoupanca(17)
conta17.deposita(1000)
conta17.passa_o_mes()
print(conta17)

conta16 = ContaCorrente(16)
conta16.deposita(1000)
conta17 = ContaPoupanca(17)
conta17.deposita(1000)

contas = [conta16, conta17]

for conta in contas:
  conta.passa_o_mes()
  print(conta)



"""## Evitar usar ARRAY!
Se precisamos de trabalho numero uscar NP (Numpy)
"""

import array as arr

arr.array('d', [1, 3.5])

import numpy as np
numeros = np.array([1, 3.5])

numeros + 3

